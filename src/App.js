import React, {Component} from 'react';import './App.css';import Grid from "@material-ui/core/Grid";import Select from "@material-ui/core/Select";import InputLabel from "@material-ui/core/InputLabel";import {compare, compareCities, distinctCountries, getDistanceFromLatLonInKm, objectToArray} from "./assets/utils";import data from './assets/files/result.json';import MenuItem from "@material-ui/core/MenuItem";const cities = data;class App extends Component {    constructor(props) {        super(props);        let countries = objectToArray(distinctCountries(cities));        countries.sort(compare);        this.state = {            distCountry: '',            distCity: '',            distLong: -90000,            distLat: -90000,            originCountry: '',            originCity: '',            originLong: -90000,            originLat: -90000,            countries: countries,            cityListOrigin: [],            cityListDist: []        };        this.mapCountries = this.mapCountries.bind(this);        this.mapCities = this.mapCities.bind(this);    }    mapCountries() {        let c = this.state.countries;        return c.map(item => {            return (                <MenuItem value={ item.value }>{ item.value }</MenuItem>            );        })    }    mapCities(array){        if(!array){            return null;        }        return array.map(item => {            return(                <MenuItem value={ item.city_ascii }>{ item.city_ascii }</MenuItem>            );        })    }    originCountryChange = (event) => {        let x = [...cities];        let cityInCountry = [];        x.forEach(s => {            if(s.country === event.target.value){                cityInCountry.push(s);            }        });        cityInCountry.sort(compareCities);        this.setState({            originCountry: event.target.value,            cityListOrigin: cityInCountry        });    };    distCountryChange = (event) => {        let x = [...cities];        let cityInCountry = [];        x.forEach(s => {            if(s.country === event.target.value){                cityInCountry.push(s);            }        });        cityInCountry.sort(compareCities);        this.setState({            distCountry: event.target.value,            cityListDist: cityInCountry        });    };    originCityChange = (event) => {        let x = [...this.state.cityListDist];        let city = {            lat: -90000,            lng: -90000        };        x.forEach(s => {            if(s.city_ascii === event.target.value){                city = s;            }        });        this.setState({            originCity: event.target.value,            originLat: city.lat,            originLong: city.lng        });    };    distCityChange = (event) => {        let x = [...this.state.cityListDist];        let city = {            lat: -90000,            lng: -90000        };        x.forEach(s => {            if(s.city_ascii === event.target.value){                city = s;            }        });        this.setState({            distCity: event.target.value,            distLat: city.lat,            distLong: city.lng        });    };    render() {        const s = this.state;        let originList = this.mapCountries();        let distCities = this.mapCities(s.cityListDist);        let originCities = this.mapCities(s.cityListOrigin);        let distance = getDistanceFromLatLonInKm(s.originLat, s.originLong, s.distLat, s.distLong);        let numberOfPies = distance/0.00036;        return (            <div className="App">                <Grid container>                    <Grid item xs={ 12 }>                        <h2>Distance-2-Pi</h2>                    </Grid>                    <Grid item xs={ 6 }>                        <InputLabel>Origin Country</InputLabel>                        <Select                            value={ this.state.originCountry }                            onChange={ this.originCountryChange }                            className="selector"                        >                            { originList }                        </Select>                        {                            s.originCountry === '' ? null :                                <div>                                    <InputLabel>Origin City</InputLabel>                                    <Select                                        value={ this.state.originCity }                                        onChange={ this.originCityChange }                                        className="selector"                                    >                                        { originCities }                                    </Select>                                </div>                        }                    </Grid>                    <Grid item xs={ 6 }>                        <InputLabel>Destination Country</InputLabel>                        <Select                            value={ this.state.distCountry }                            onChange={ this.distCountryChange }                            className="selector"                        >                            { originList }                        </Select>                        {                            s.distCountry === '' ? null :                                <div>                                    <InputLabel>Destination City</InputLabel>                                    <Select                                        value={ this.state.distCity }                                        onChange={ this.distCityChange }                                        className="selector"                                    >                                        { distCities }                                    </Select>                                </div>                        }                    </Grid>                    <Grid item xs={12}>                        {                            distance > 0 && s.originCity && s.distCity ?                                <div>                                    <h3>Distance between the two cities is {distance.toFixed(2)} in km</h3>                                    <h3>The average Pie is 360mm or 0.00036km</h3>                                    <h3>It requires {numberOfPies.toFixed(0)} pies to span {this.state.originCity} to {this.state.distCity}</h3>                                </div>                                :                                null                        }                    </Grid>                </Grid>            </div>        );    }}export default App;